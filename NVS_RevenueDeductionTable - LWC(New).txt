
Component Name : nVS_RevenueDeductionTable

--------------------------------------------------------------------------------------------------------
CSS
--------------------------------------------------------------------------------------------------------

.table-container {
    overflow-x: auto;
    max-width: 100%;
    display: flex;
}

table {
    width: auto;
    border-collapse: collapse;
}

th, td {
    border: 1px solid #e2dede;
    padding: 8px;
    text-align: left;
    height: 40px;
}

.fixed-column {
    white-space: nowrap;
    overflow: hidden;
    position: sticky;
    z-index: 2;
}

.fixed-column-th {
    position: sticky;
    top: 0;
    background-color: #f2f2f2;
    z-index: 2;
}

.scrollable-container {
    overflow-x: auto;
    max-width: 100%;
    overflow-y: hidden;
    margin-bottom: -17px;
}

.fixed-column, .fixed-column-th {
    text-align: center;
}


----------------------------------------------------------------------------------------------------------
HTML
----------------------------------------------------------------------------------------------------------

<template>

    <template if:true={Spinner}>
        <div class="spinner">
            <lightning-spinner alternative-text="Loading" size="medium"></lightning-spinner>
        </div>
    </template>
    
    <template lwc:if={showMsg}>

        <div class="slds-align_absolute-center" style="color: rgb(161, 118, 240);font-size: 20px;">* No Data Available</div>
        <br>
    </template>

    <!-- <template lwc:if={showData}> -->

        <div class="slds-var-p-around_medium slds-grid slds-wrap ">

            <div class="slds-col slds-size_7-of-12">
                
            </div>
    
            <div class="slds-col slds-size_2-of-12">
                <lightning-button icon-name="utility:download" class="slds-float_right" style="margin-top: 25px;margin-left: 15px;"
                    label="Download" 
                    title="Download CSV File"
                    onclick={downloadCSVFile} variant="brand">
                </lightning-button>
            </div>

            <div class="slds-col slds-size_3-of-12">
                <lightning-input class="slds-var-m-bottom_large slds-float_right" style="margin-right:15px;"
                    type="file"
                    label="Upload"
                    accept={acceptedFormats}
                    onchange={handleUploadFile}>
                </lightning-input>
            </div>

        </div>
                

                

    <div class="table-container">
        <table>
            <thead>
                <tr>
                    <th class="fixed-column sortable" data-column="Country" onclick={handleSort}>Country</th>
                    <th class="fixed-column sortable" data-column="ProductFamily" onclick={handleSort}>Product Family</th>
                    <th class="fixed-column sortable" data-column="ProductSKU" onclick={handleSort}>Product SKU</th>
                    <th class="fixed-column sortable" data-column="Strength" onclick={handleSort}>Strength</th>
                    <th class="fixed-column sortable" data-column="Form" onclick={handleSort}>Form</th>
                    <th class="fixed-column sortable" data-column="PackSize" onclick={handleSort}>Pack Size</th>
                </tr>
            </thead>
            <tbody>
                <!-- Loop through the data to display rows -->
                <template for:each={formattedData} for:item="record">
                    <tr key={record.productFamily}>
                        <td class="fixed-column" >{record.country}</td>
                        <td class="fixed-column" >{record.productFamily}</td>
                        <td class="fixed-column" >{record.productSKU}</td>
                        <td class="fixed-column" >{record.strength}</td>
                        <td class="fixed-column" >{record.form}</td>
                        <td class="fixed-column" >{record.packSize}</td>
                    </tr>
                </template>
            </tbody>
        </table>
        <div class="scrollable-container">
            <table>
                <thead>
                    <tr>
                        <!-- Dynamically generated month columns -->
                        <template for:each={columns} for:item="col">
                            <th key={col.label} style="min-width: 100px; max-width: 150px; text-align: center;">
                                {col.label}
                            </th>
                        </template>
                    </tr>
                </thead>
                <tbody>
                    <!-- Loop through the data to display rows -->
                    <template for:each={formattedData} for:item="record">
                        <tr key={record.productFamily}>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month0}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month1}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month2}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month3}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month4}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month5}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month6}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month7}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month8}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month9}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month10}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month11}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month12}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month13}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month14}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month15}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month16}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month17}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month18}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month19}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month20}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month21}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month22}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month23}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month24}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month25}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month26}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month27}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month28}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month29}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month30}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month31}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month32}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month33}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month34}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month35}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month36}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month37}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month38}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month39}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month40}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month41}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month42}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month43}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month44}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month45}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month46}
                            </td>
                            <td style="min-width: 100px; max-width: 150px; text-align: center;">
                                {record.Month47}
                            </td>
                        </tr>
                    </template>
                </tbody>
            </table>
        </div>
    </div><br>

        <div class="slds-var-p-around_medium slds-grid slds-wrap ">

        <div class="slds-col slds-size_3-of-12 slds-var-m-top_xx-large">
            <b>{totalRecordCount} Records : Page {page} of {totalPage}</b>
        </div>

        <div class="slds-col slds-grid slds-size_3-of-12 slds-var-m-bottom_x-large">
            <div class="slds-col slds-size_3-of-5 slds-var-m-top_xx-large">
                <label  ><b>Records Per Page : </b></label>
            </div>

            <div class="slds-col slds-size_2-of-5 slds-var-m-right_xx-small slds-var-m-bottom_x-large">
                <lightning-combobox class="slds-size_xx-small" placeholder="Select..." options={comboBoxOptions} 
                    onchange={handleComboBoxChange} value={pageSize}></lightning-combobox>
            </div>
        </div>

        <div class="slds-col slds-size_2-of-12 slds-var-m-top_x-large">
            
        </div>

        <div class="slds-col slds-size_4-of-12 slds-var-m-top_x-large">
            <lightning-layout>
                <lightning-layout-item flexibility="auto">
                    <lightning-button label="Previous Page" icon-name="utility:chevronleft" onclick={previousHandler}
                        disabled={disablePrevious}>
                    </lightning-button>
                </lightning-layout-item>
                
                <lightning-layout-item flexibility="auto">
                    <lightning-button label="Next Page" icon-name="utility:chevronright" icon-position="right"
                        onclick={nextHandler} disabled={disableNext}></lightning-button>
                </lightning-layout-item>
            </lightning-layout>
        </div>
    </div>

    <!-- </template>   -->

</template>

----------------------------------------------------------------------------------------------------------------------------
Java Script
----------------------------------------------------------------------------------------------------------------------------

import { LightningElement, track, api } from 'lwc';
import getDeductionRecords from '@salesforce/apex/NVS_RevenueDeductionTableController.getDeductionRecords';
import processCsvFile from '@salesforce/apex/NVS_RevenueDeductionTableController.processCsvFile';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';

export default class NVS_RevenueDeductionTable extends LightningElement {

    columns = [];
    @track deductionData = [];
    @track formattedData = [];
    @track months = [];
    @track startDate = '';

    @track sortedBy;
    @track sortedDirection = 'asc';

    @track page = 1;
    @track items = [];
    @track parameters = {};
    
    @track startingRecord = 0;
    @track endingRecord = 10;
    @track pageSize = '10';
    @track totalRecordCount = 0;
    @track totalPage = 0;

    @track Spinner = false;
    @track showData = false;
    @track showMsg = false;

    @track fixedHeaders = ['Country', 'ProductFamily', 'ProductSKU', 'Strength', 'Form', 'PackSize'];


    get comboBoxOptions()
    {
        return [
            {label:'10',value:'10'},
            {label:'15',value:'15'},
            {label:'20',value:'20'},
        ];
    }

    constructor() {
        super();
        this.pazeSize = '10';
    }

    populateMonths(startDate){

        this.columns = [];
        this.months = [];

        const currentDate = startDate != '' ? new Date(startDate) : new Date();
        
        const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

        for (let i = 0; i < 48; i++) {
            const month = monthNames[(currentDate.getMonth() + i) % 12];
            const year = currentDate.getFullYear() + Math.floor((currentDate.getMonth() + i) / 12);
            this.columns.push({ label: `${month} ${year}`, fieldName: `Month${i}`, type: 'text', width: '150px', });
        
            this.months.push(`Month${i}`);
        }

        //console.log('Columns : '+JSON.stringify(this.columns));
    }

    connectedCallback(){
       this.showData = false;
       this.showMsg = false;

    }

    @api getDeductionData(params){
        //console.log('In Child --> Event fired at Parent..., Executing at Child..');
        //console.log('Parameters : '+JSON.stringify(params));
        this.parameters = params;

        let today = new Date();

        this.startDate = params.startDate != '' ? params.startDate : today.toISOString().split('T')[0];
        console.log('Start Date at Child : '+this.startDate);
    
        this.populateMonths(this.startDate);

        this.Spinner = true;

        getDeductionRecords(this.parameters)
        .then(result => {

            if(result.length > 0){
                this.showMsg = false;
                this.showData = true;
            }
            else{
                this.showData = false;
                this.showMsg = true;
            }

            this.deductionData = result;

            this.formattedData = this.deductionData.reduce((formattedRecords, record) => {
                const uniqueKey = `${record.country}-${record.productFamily}-${record.productSKU}-${record.strength}-${record.form}-${record.packSize}`;
                const country = `${record.country}`;
                const productFamily = `${record.productFamily}`;
                const productSKU = `${record.productSKU}`;
                const strength = `${record.strength}`;
                const form = `${record.form}`;
                const packSize = `${record.packSize}`;
                const existingRecord = formattedRecords.find(item => item.uniqueKey === uniqueKey);

                if (existingRecord) {
                    const deductionMonthIndex = this.calculateMonthIndex(record.deductionDate);

                    // Map deduction percentage to the dynamically generated column for the deduction month
                    this.columns.forEach((col, index) => {
                        if (col.fieldName && col.fieldName.startsWith('Month')) {
                            existingRecord[col.fieldName] = index === deductionMonthIndex ? record.deductionPercentage : existingRecord[col.fieldName];
                        }
                    });
                } else {
                    const formattedRecord = { uniqueKey, country, productFamily, productSKU, strength, form, packSize, Id: record.Id };

                    const deductionMonthIndex = this.calculateMonthIndex(record.deductionDate);

                    // Map deduction percentage to the dynamically generated column for the deduction month
                    this.columns.forEach((col, index) => {
                        if (col.fieldName && col.fieldName.startsWith('Month')) {
                            formattedRecord[col.fieldName] = index === deductionMonthIndex ? record.deductionPercentage : '';
                        }
                    });

                    formattedRecords.push(formattedRecord);
                }

                return formattedRecords;
            }, []);

            
            setTimeout(() => {
                this.Spinner = false;
                }, 3000);
            
            this.items = this.formattedData;
            this.totalRecordCount = this.items.length; 
            this.totalPage = Math.ceil(this.totalRecordCount / this.pageSize);

            this.formattedData = this.items.map(row =>{
                return {...row}
            }).slice(this.startingRecord, this.endingRecord);

            //console.log('formattedData : ' + JSON.stringify(this.items));

        })
        .catch(error => {
            this.Spinner = false;
            console.error('Error getting Deduction Records : ' + JSON.stringify(error));
        });

    }


    calculateMonthIndex(deductionMonth) {
        // Return -1 if deductionMonth is null or undefined
        if (!deductionMonth) {
            return -1;
        }
        
        const currentDate = new Date(this.startDate);
        const deductionDate = new Date(deductionMonth);
        const monthDiff = (deductionDate.getFullYear() - currentDate.getFullYear()) * 12 + (deductionDate.getMonth() - currentDate.getMonth());

        return monthDiff >= 0 && monthDiff < 48 ? monthDiff : -1;
    }

    handleSort(event) {
        const column = event.target.dataset.column;
        if (column === this.sortedBy) {
            this.sortedDirection = this.sortedDirection === 'asc' ? 'desc' : 'asc';
        } else {
            this.sortedBy = column;
            this.sortedDirection = 'asc';
        }
        this.sortData();
    }

    sortData() {
        const field = this.sortedBy;
        const reverse = this.sortedDirection === 'desc' ? -1 : 1;
        this.formattedData = [...this.formattedData].sort((a, b) => {
            return (a[field] > b[field] ? 1 : -1) * reverse;
        });
    }

    handleComboBoxChange(event) {
        this.page = 1;
        this.pageSize = event.detail.value;
        this.totalPage = Math.ceil(this.totalRecordCount / this.pageSize);
        this.displayRecordPerPage(this.page);
    }
    
    previousHandler() {
        if (this.page > 1) {
            this.page = this.page - 1; 
            this.displayRecordPerPage(this.page);
        }
    }

    
    nextHandler() {
        if ((this.page < this.totalPage) && this.page !== this.totalPage) {
            this.page = this.page + 1; 
            this.displayRecordPerPage(this.page);
        }
    }

    
    displayRecordPerPage(page) {

        this.startingRecord = ((page - 1) * this.pageSize);
        this.endingRecord = (this.pageSize * page);

        this.endingRecord = (this.endingRecord > this.totalRecordCount)
            ? this.totalRecordCount : this.endingRecord;

            this.formattedData = this.items.map(row =>{
                return {...row}
            }).slice(this.startingRecord, this.endingRecord);

    }
    
    get disablePrevious() {
        return this.page <= 1;
    }
    
    get disableNext() {
        return this.page >= this.totalPage;
    }

    //Download CSV - Start

    // this method validates the data and creates the csv file to download
    downloadCSVFile() {   
        let rowEnd = '\n';
        let csvString = '';
        // this set elminates the duplicates if have any duplicate keys
        let rowData = new Set();

        // getting keys from data
        this.items.forEach(function (record) {
            Object.keys(record).forEach(function (key) {
                if(key !== 'uniqueKey' && key !== 'Id'){
                    rowData.add(key);
                }
            });
        });

        let csvHeaders = new Set();

        this.fixedHeaders.forEach(element => {
            csvHeaders.add(element);
        });

        this.columns.forEach(element => {
            csvHeaders.add(element.label);
        });

        // Array.from() method returns an Array object from any object with a length property or an iterable object.
        rowData = Array.from(rowData);
        
        csvHeaders = Array.from(csvHeaders);
        //console.log('csvHeaders : '+csvHeaders);
        
        // splitting using ','
        csvString += csvHeaders.join(',');
        csvString += rowEnd;

        // main for loop to get the data based on key value
        for(let i=0; i < this.items.length; i++){
            let colValue = 0;

            // validating keys in data
            for(let key in rowData) {
                if(rowData.hasOwnProperty(key)) {
                    // Key value 
                    // Ex: Id, Name
                    let rowKey = rowData[key];
                    // add , after every value except the first.
                    if(colValue > 0){
                        csvString += ',';
                    }
                    // If the column is undefined, it as blank in the CSV file.
                    let value = this.items[i][rowKey] === undefined ? '' : this.items[i][rowKey];
                    csvString += '"'+ value +'"';
                    colValue++;
                }
            }
            csvString += rowEnd;
        }

        // Creating anchor element to download
        let downloadElement = document.createElement('a');

        // This  encodeURI encodes special characters, except: , / ? : @ & = + $ # (Use encodeURIComponent() to encode these characters).
        downloadElement.href = 'data:text/csv;charset=utf-8,' + encodeURI(csvString);
        downloadElement.target = '_self';
        // CSV File Name
        downloadElement.download = 'Revenue Deduction Data.csv';
        // below statement is required if you are using firefox browser
        document.body.appendChild(downloadElement);
        // click() Javascript function to download CSV file
        downloadElement.click(); 
    }

    //Download CSV - End


    acceptedFormats = ['.csv'];

    handleUploadFile(event) {
        if (event.detail.files && event.detail.files.length) {
            const csvFile = event.detail.files[0];
            // you could check the file size (csvFile.size)
            
            this.Spinner = true;
            const fileReader = new FileReader();
            fileReader.onloadend = () => {
                const fileBody = fileReader.result;
                //console.log('fileBody : '+fileBody);
                
                const apexParams = {
                    fileName: csvFile.name,
                    fileBody,
                    selectedDate: this.startDate
                };

                processCsvFile(apexParams)
                .then(result =>{
                    console.log('Upload Result : '+JSON.stringify(result));

                    if(result == 'Success'){
                        this.Spinner = false;

                        const evt = new ShowToastEvent({
                            title: 'Success',
                            message: 'File uploaded Successfully!',
                            variant: 'success',
                        });

                        this.dispatchEvent(evt);

                        this.getDeductionData(this.parameters);

                        setTimeout(() => {
                            this.Spinner = false;
                        }, 5000);
                    }
                    // else{
                    //     this.Spinner = false;

                    //     const evt = new ShowToastEvent({
                    //         title: 'Error',
                    //         message: JSON.stringify(result),
                    //         variant: 'error',
                    //     });

                    //     this.dispatchEvent(evt);
                    // }
                    
                    //this.Spinner = false;
                })
                .catch(error =>{
                    console.log('Upload Error : '+JSON.stringify(error));
                    this.Spinner = false;

                    const evt = new ShowToastEvent({
                        title: 'Error',
                        message: JSON.stringify(error),
                        variant: 'error',
                    });

                    this.dispatchEvent(evt);
                })
                
            };
            fileReader.readAsText(csvFile);
        }
    }

}

-----------------------------------------------------------------------------------------------------------
XML
-----------------------------------------------------------------------------------------------------------

<?xml version="1.0" encoding="UTF-8"?>
<LightningComponentBundle xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>59.0</apiVersion>
    <isExposed>false</isExposed>
</LightningComponentBundle>